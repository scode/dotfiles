;; Set - but only if already bound.
(defun set-if-bound (sym val)
  (when (boundp sym)
    (set sym val)))

;; Likewise, setq - but only if already bound.
(defmacro setq-if-bound (sym val)
  `(set-if-bound ',sym ,val))

;; Allow us to keep user specific code in ~/.el
(add-to-list 'load-path "~/.el/")

;; If on Gentoo, let Gentoo package management automate loading
;; of various e-lisp packages
(let ((site-gentoo "/usr/share/emacs/site-lisp/site-gentoo.el"))
  (when (file-exists-p site-gentoo)
    (load site-gentoo)))

;; In case there are any 'local' machine specific personal settings,
;; load them
(let ((settings-local "~/.emacs-local"))
  (when (file-exists-p settings-local)
    (load settings-local)))

;; Function to initialize ruby-mode
(defun init-ruby-mode ()
  (autoload 'ruby-mode "ruby-mode" "Load ruby-mode")
  (add-to-list 'auto-mode-alist '("\\.rb\\'" . ruby-mode)))

;; Function to initialize slime
(defun init-slime ()
  ;; List potential Common Lisps. Use of other than default is
  ;; possible by M-- M-x slime, giving the symbolic name as argument.
  (setq slime-lisp-implementations
	'((sbcl ("/usr/local/bin/sbcl"))
	  (ccl ("~/ccl/fx86cl64"))
	  (clisp ("/usr/local/bin/clisp"))))
  (slime-setup))

;; When doing ecmascript/actionscript, modify style to match the
;; default used by Adobe's CS and FlashDevelop - with the exception of
;; using spaces instead of tabs.
(defun init-ecmascript-mode ()
  (add-hook 'ecmascript-mode-hook
	    (lambda ()
	      (setq intend-tabs-mode nil)
	      (setq c-basic-offset 4)
	      (setq default-tab-width 4))))

;; Load known-to-be-common packages if installed and not already loaded. Each
;; item in the list of libraries must be either the name of the library, or
;; a list containing the name of the library and an initialization function
;; to call after loading it (or if it is already loaded).
(dolist (lib (list "erc-auto"
		   (list "slime" #'init-slime)
		   (list "ruby-mode" #'init-ruby-mode)
		   "doc-mode"
		   (list "ecmascript-mode" #'init-ecmascript-mode)))
  (let ((lib-name (if (listp lib) (car lib) lib))
	(lib-init-fn (if (listp lib) (cadr lib) nil)))
    (when (locate-library lib-name)
      (let ((lib-sym (intern lib-name)))
	(when (not (featurep lib-sym))
	  (require lib-sym))
	(when lib-init-fn (funcall lib-init-fn))))))

;; Add proper extension -> mode mappings
(add-to-list 'auto-mode-alist '("\\.icc$" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.ih$"  . c++-mode))
(add-to-list 'auto-mode-alist '("\\.as[123]?$" . ecmascript-mode))

;; Always enable font-lock-mode when supported
(global-font-lock-mode 1)

;; Show paren matching indicators
(show-paren-mode t)

;; Always show line number and column number in status bar
(line-number-mode t)
(column-number-mode t)

;; Highlight region when selecting
(setq-default transient-mark-mode t)

;; Enable shift-selection
(pc-selection-mode)

;; For purposes of paragraph filling
(setq fill-column 80)

;; Set 8-bit input
(set-input-mode (car (current-input-mode)) ; Interupt
                (nth 1 (current-input-mode)) ; Flow control
                '8bit           ; Meta
                (nth 3 (current-input-mode))) ; Quit

;; When in X, paste at cursor instead of mouse pointer (*drool*)
(setq mouse-yank-at-point t)

;; When in X, get rid of unnecessary clutter.
(when (functionp 'menu-bar-mode) (menu-bar-mode 0))
(when (functionp 'tool-bar-mode) (tool-bar-mode 0))

;; When in X, enable mouse wheel
(defun mwheel-up () (interactive) (scroll-up 5))
(defun mwheel-down () (interactive) (scroll-down 5))
(global-set-key [mouse-5] 'mwheel-up)
(global-set-key [mouse-4] 'mwheel-down)

;; When in X, move mouse when cursor approaches it
(mouse-avoidance-mode 'animate)

;; Switch to sane non-ambiguous date format
(setq european-calendar-style t)

;; Scroll one line at a time when moving cursor off-screen,
;; instead of half a page.
(setq scroll-step 1)

;; More useful title name please, containing buffer name.
(setq frame-title-format "Emacs - %b")

;; Always preserve case during dynamic abbrev expansion
(setq dabbrev-case-replace nil)

;; Disable the world's most annoying indentation standard - DIE DIE DIE
(add-hook 'c-mode-hook '(lambda () (c-set-offset 'substatement-open '0)))
(add-hook 'c++-mode-hook '(lambda () (c-set-offset 'substatement-open '0)))

;; When keeping several files of the same name open (from different
;; directories), display enough information in the buffer name for a
;; human to distinguish them.
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
(setq uniquify-after-kill-buffer-p t)

;; Don't show splash screen on every start-up
(setq inhibit-splash-screen t)

;; Prevent overzealous sysadmin/operating system from forcing
;; localization on flyspell's choice of default dictionary.
(setq ispell-local-dictionary "american")

;; Sort the paragraph surrounding the point.
(defun sort-paragraph-at-point ()
  (interactive)
  (let ((line-before-sort (line-number-at-pos)))
    (mark-paragraph)
    (sort-lines nil (region-beginning) (region-end))
    (goto-line line-before-sort)))

;; Key bindings
(global-set-key "\C-xr" 'revert-buffer)
(global-set-key "\C-xg" 'goto-line)
(global-set-key "\C-xf" 'fill-paragraph)
(global-set-key "\M-s"  'sort-paragraph-at-point)
(global-set-key "\C-x>" 'increase-left-margin)
(global-set-key "\C-x<" 'decrease-left-margin)
(global-set-key "\C-xp" 'compile)

;; Disable interactive warning when scralling left
(put 'scroll-left 'disabled nil)
