source_if_exists() {
  fname=$1
  if [[ -e $fname ]]
  then
    source $fname
  fi
}

# If $1 contains $2, return success. Else, return failure.
# $1 is assumed to be a PATH stule string (colon separated).
contains_path() {
  if [[ ":${1}:" == *":${2}:"* ]]; then
    return 0
  else
    return 1
  fi
}

# Add a directory to the end of $PATH, unless it already appears in $PATH.
# If the path is not an existing directory, do not modify PATH.
path_add_postfix() {
  if ! contains_path $PATH $1; then
    PATH="${PATH}:$1"
  fi
}

# Add a directory to the beginning of $PATH, unless it already appears in $PATH.
# If the path is not an existing directory, do not modify PATH.
path_add_prefix() {
  if ! contains_path $PATH $1; then
    PATH="$1:${PATH}"
  fi
}

source_if_exists ~/.zcommon-local-pre

setopt prompt_subst
autoload -Uz vcs_info
zstyle ':vcs_info:*' actionformats \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats       \
    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'

zstyle ':vcs_info:*' enable git cvs svn hg

vcs_info_wrapper() {
  vcs_info
  if [[ -n "$vcs_info_msg_0_" ]]; then
    echo "%{$fg[grey]%}${vcs_info_msg_0_}%{$reset_color%}$del"
  fi
}

PS1='$(vcs_info_wrapper)%% '
export RPS1='%m:%~%(..(%?%)%'

# The year is > 2000. We have memory.
HISTSIZE=500

# Default to UTF-8.
if [[ -z "${LANG}" ]]
then
  LANG=en_US.UTF_8
fi

# Enable intelligent completion.
autoload -U compinit
compinit

# It sucks to not have a core dump after a crash, but it sucks even
# more to have multi-gigabyte core dumps happen when you don't want
# them.
ulimit -c 0

# Don't start background jobs niced
setopt no_bg_nice

export PAGER=less
export EDITOR=emacs

alias mplayer='mplayer -lavdopts fast:threads=4 -monitoraspect 16:10 -cache-min 1 -cache 50000 -ao oss:/dev/dsp4:mixer-device=/dev/mixer4'
alias irb='irb --readline -r irb/completion'
alias svns='svn status'

if [[ "$(uname)" == "Linux" ]]
then
  alias spotify='wine "C:\Program Files\Spotify\spotify.exe"'
fi

alias stackless='/home/scode/stackless/bin/python2.6'
alias fetch_dropbox='cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -'
alias fetch_dropbox_script='cd ~ && mkdir -p bin && wget -O bin/dropbox.py "https://www.dropbox.com/download?dl=packages/dropbox.py"'

configure_git() {
  set -eux
  git config --global user.email peter.schuller@infidyne.com
  git config --global user.name "Peter Schuller"
}

# rxvt-unicode is not well-known in termcaps
if [[ "${TERM}" == "rxvt-unicode" ]]
then
  export TERM="rxvt"
fi

# Allocate a temp directory and cd into it.
tmpdir() {
  dname=$(mktemp -t randtmpXXXXXXXX)
  # mkdir has nice atomic semantics, so rm+mdir is race-free
  if rm $dname && mkdir $dname
  then
    cd $dname
    echo "now in $(pwd)"
  else
    echo "unable to securely allocate $dname" >&2
    return 1
  fi
}

if [[ -d /usr/local/go/bin ]]; then
  path_add_postfix /usr/local/go/bin
fi

if [[ -d ~/.cargo/bin ]]; then
   path_add_postfix ~/.cargo/bin
fi

if [[ -e ~/go ]]; then
  export GOPATH=${GOPATH:-~/go}
  path_add_postfix ~/go/bin
fi

path_add_postfix ~/bin
path_add_postfix ~/bin.local
path_add_postfix ~/.local/bin
path_add_postfix ~/go_appengine

for ruby_gem_dir in ~/.gem/ruby/*(N)
do
  path_add_postfix $ruby_gem_dir/bin
done

# https://nixos.org/nix/
source_if_exists ~/.nix-profile/etc/profile.d/nix.sh

source_if_exists ~/.zcommon-local
source_if_exists ~/.zcommon-local-post

# On OS X only, watch a diretory for file changes and trigger the
# active Chrome tab to refresh when changes are detected. Requires
# fswatch (brew install fswatch).
#
# Usage: watchnload /path/to/tree
watchnload() {
  if which fswatch >/dev/null 2>&1; then
    fswatch -o "$1" | xargs -n1 -I{} osascript \
      -e 'tell application "Google Chrome"' \
      -e '   reload active tab of window 1' \
      -e 'end tell'
  else
    echo "fswatch required; brew install fswatch?"
  fi
}
